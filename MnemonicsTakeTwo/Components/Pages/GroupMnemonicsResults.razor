@rendermode InteractiveAuto
@page "/group-mnemonics-results/{groupId:int}/{sessionId}"
@using MnemonicsTakeTwo.Data
@using MnemonicsTakeTwo.Services
@inject IFlashcardResultService FlashcardResultService
@inject IUserIdentityProcessor UserIdentityProcessor
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<h3>Group Mnemonics Results</h3>

@if (results == null)
{
    <p>Loading...</p>
}
else if (!results.Any())
{
    <p>No results found for this group.</p>
}
else
{
    <MudTable Items="results" Hover="true">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Phrase</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Knew It</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Mnemonic.Name</MudTd>
            <MudTd DataLabel="Phrase">@context.Mnemonic.Phrase</MudTd>
            <MudTd DataLabel="Description">@context.Mnemonic.Description</MudTd>
            <MudTd DataLabel="Knew It">
                @if (context.KnewIt == true)
                {
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" />
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
    <MudText Typo="Typo.h6">Ratio of correct answers: @correctCount/@totalCount</MudText>
}

@code {
    [Parameter]
    public int groupId { get; set; }
    [Parameter]
    public string sessionId { get; set; }
    private List<FlashcardResult> results;
    private string currentUserId;
    private int correctCount;
    private int totalCount;

    protected override async Task OnInitializedAsync()
    {
        currentUserId = this.UserIdentityProcessor.GetCurrentUserId().Result;
        results = await FlashcardResultService.GetFlashcardResultsByGroupIdAndSessionIdAsync(groupId, currentUserId, sessionId);
        CalculateCorrectRatio();
    }

    private void CalculateCorrectRatio()
    {
        totalCount = results.Count;
        correctCount = results.Count(r => r.KnewIt == true);
    }
}

