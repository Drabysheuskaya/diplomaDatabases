@rendermode InteractiveServer
@page "/manage-groups"
@using MnemonicsTakeTwo.Data
@using MnemonicsTakeTwo.Services
@inject IGroupService GroupService
@inject NavigationManager Navigation
@inject IDialogService DialogService
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<h3>Manage Groups</h3>

@if (groups == null)
{
    <p>Loading...</p>
}
else if (groups.Count == 0)
{
    <p>No groups found.</p>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowAddGroupDialog">Add Group</MudButton>
}
else
{
    <MudTable Items="groups" Hover="true">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => EditGroup(context.Id)">Edit</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => ConfirmDeleteGroup(context.Id)">Delete</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowAddGroupDialog">Add Group</MudButton>
}

@code {
    private List<Group> groups;

    protected override async Task OnInitializedAsync()
    {
        groups = (await GroupService.GetGroupsAsync()).ToList();
    }

    private void EditGroup(int groupId)
    {
        Navigation.NavigateTo($"/edit-group/{groupId}");
    }

    private async Task ConfirmDeleteGroup(int groupId)
    {
        var parameters = new DialogParameters { ["ContentText"] = "Are you sure you want to delete this group?" };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteGroup(groupId);
        }
    }

    private async Task DeleteGroup(int groupId)
    {
        await GroupService.DeleteGroupAsync(groupId);
        groups = (await GroupService.GetGroupsAsync()).ToList();
    }

    private void ShowAddGroupDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<AddGroupDialog>("Add Group", parameters, options);
        dialog.Result.ContinueWith(async result =>
        {
            if (!result.Result.Canceled)
            {
                groups = (await GroupService.GetGroupsAsync()).ToList();
            }
        });
    }
}





