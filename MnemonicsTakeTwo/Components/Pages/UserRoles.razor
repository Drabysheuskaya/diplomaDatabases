@rendermode InteractiveServer
@page "/user-roles/{userId}"
@using Microsoft.AspNetCore.Identity
@using MnemonicsTakeTwo.Data
@using MnemonicsTakeTwo.Services
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<h3>Manage Roles for @user?.UserName</h3>

@if (user == null)
{
    <p>Loading...</p>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h6">Current Roles: @string.Join(", ", userRoles)</MudText>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await AssignRole("Admin"))">Assign Admin</MudButton>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(async () => await AssignRole("Student"))">Assign Student</MudButton>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@(async () => await RemoveRole("Admin"))">Remove Admin</MudButton>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@(async () => await RemoveRole("Student"))">Remove Student</MudButton>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter]
    public string userId { get; set; }
    private ApplicationUser user;
    private List<string> userRoles = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.FindByIdAsync(userId);
        userRoles = (await UserManager.GetRolesAsync(user)).ToList();
    }

    private async Task AssignRole(string role)
    {
        if (!await RoleManager.RoleExistsAsync(role))
        {
            await RoleManager.CreateAsync(new IdentityRole(role));
        }

        if (!await UserManager.IsInRoleAsync(user, role))
        {
            await UserManager.AddToRoleAsync(user, role);
            userRoles.Add(role);
        }
    }

    private async Task RemoveRole(string role)
    {
        if (await UserManager.IsInRoleAsync(user, role))
        {
            await UserManager.RemoveFromRoleAsync(user, role);
            userRoles.Remove(role);
        }
    }
}

