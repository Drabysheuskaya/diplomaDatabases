@rendermode InteractiveAuto
@page "/edit-mnemonic/{mnemonicId:int}"
@using MnemonicsTakeTwo.Data
@using MnemonicsTakeTwo.Services
@inject ICategoryService CategoryService
@inject IMnemonicService MnemonicService
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<h3>Edit Mnemonic</h3>

@if (mnemonic == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="mnemonic" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="mnemonic.Name" Label="Name" Required="true" ShrinkLabel="true" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="mnemonic.Phrase" Label="Phrase" Required="true" ShrinkLabel="true" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="mnemonic.Description" Label="Description" Required="true" ShrinkLabel="true" />
            </MudItem>
            <MudItem xs="12">
                <MudCheckBox T="bool" @bind-Value="mnemonic.IsVisible" Label="Is Visible" />
            </MudItem>
            <MudItem xs="12">
                <InputFile OnChange="SelectImage" />
                @if (imageData == null && mnemonic.Image == null)
                {
                    <MudText Color="Color.Error">Please upload an image.</MudText>
                }
            </MudItem>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="LoadImage" Disabled="@(selectedFile == null)">Load Image</MudButton>
            </MudItem>
            <MudItem xs="12">
                <MudButton Type="submit" Variant="Variant.Filled" Color="Color.Primary" onclick="HandleValidSubmit">Save Changes</MudButton>
            </MudItem>
            </MudGrid>
    </EditForm>
}

@code {
    [Parameter]
    public int mnemonicId { get; set; }
    private Mnemonic mnemonic;
    private byte[] imageData;
    private IBrowserFile selectedFile;

    protected override async Task OnInitializedAsync()
    {
        mnemonic = await MnemonicService.GetMnemonicByIdAsync(mnemonicId);
    }

    private void SelectImage(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task LoadImage()
    {
        if (selectedFile != null)
        {
            using var stream = selectedFile.OpenReadStream();
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            imageData = memoryStream.ToArray();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (imageData != null)
        {
            mnemonic.Image = imageData;
        }

        Mnemonic newMnemonic = await MnemonicService.UpdateMnemonicAsync(mnemonic);

        Navigation.NavigateTo($"/mnemonic/{newMnemonic.Id}");
    }
}


